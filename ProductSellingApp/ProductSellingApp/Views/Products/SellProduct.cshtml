@model ProductSellingApp.Models.SaleViewModel

@{
    ViewBag.Title = "Sell Product";
}

<h2>Sell Product</h2>

<!-- Check if the Product is not null -->
@if (Model.Product != null)
{
    <div class="form-group">
        <label for="ProductName">Product Name</label>
        <input type="text" id="ProductName" value="@Model.Product.Name" class="form-control" readonly />
    </div>

    <div class="form-group">
        <label for="ProductPrice">Price Per Unit</label>
        <input type="text" id="ProductPrice" value="@Model.Product.PricePerUnit.ToString("0.##") ৳" class="form-control" readonly />
    </div>

    <div class="form-group">
        <label for="AvailableQuantity">Available Quantity</label>
        <input type="text" id="AvailableQuantity" value="@Model.Product.Quantity" class="form-control" readonly />
    </div>
}
else
{
    <p>Product details are not available.</p>
}

<form asp-action="Sell" method="post">
    @Html.AntiForgeryToken()

    <!-- Hidden fields to keep product details -->
    <input type="hidden" asp-for="Product.Id" />
    <input type="hidden" asp-for="Product.PricePerUnit" />

    <!-- Quantity Input -->
    <div class="form-group">
        <label asp-for="Quantity">Quantity</label>
        <input type="number" asp-for="Quantity" class="form-control" min="1" id="QuantityInput" />
        <span asp-validation-for="Quantity" class="text-danger"></span>
		<!-- Error message for quantity validation -->
        <span id="quantityError" class="text-danger" style="display:none;">Quantity exceeds available stock!</span>
    </div>

    <!-- Customer Dropdown -->
    <div class="form-group">
        <label asp-for="CustomerId">Customer</label>
        @if (Model.Customers != null && Model.Customers.Any())
        {
            <select asp-for="CustomerId" class="form-control" asp-items="Model.Customers">
                <option value="">-- Select Customer --</option>
            </select>
            <span asp-validation-for="CustomerId" class="text-danger"></span>
        }
        else
        {
            <p>No customers available.</p>
        }
    </div>

    <!-- Total Amount Display -->
    <div class="form-group">
        <label for="TotalAmount">Total Amount</label>
        <input type="text" id="TotalAmount" value="0" class="form-control" readonly />
    </div>

    <!-- Submit Button -->
    <div class="form-group">
        <input type="submit" value="Sell" class="btn btn-primary" />
    </div>
</form>

<!-- Display model state errors -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityInput = document.getElementById('QuantityInput');
            const totalAmountField = document.getElementById('TotalAmount');
            const pricePerUnit = parseFloat(document.getElementById('ProductPrice').value.replace(/[^0-9.-]+/g, ""));
            const availableQuantity = parseInt(document.getElementById('AvailableQuantity').value);
            const quantityError = document.getElementById('quantityError');

            quantityInput.addEventListener('input', function () {
                const quantity = parseInt(quantityInput.value) || 0;

                if (quantity > availableQuantity) {
                    quantityError.style.display = 'inline';
                    totalAmountField.value = "0.00"; 
                } else {
                    quantityError.style.display = 'none';
                    const totalAmount = quantity * pricePerUnit;
                    totalAmountField.value = totalAmount.toFixed(2);
                }
            });
        });
    </script>
}
